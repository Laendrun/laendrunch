FORMAT: 1A
HOST: https://api.laendrun.ch

# Laendrun.ch Backend API

This API is the backend API of my personnal website.

GitHub Repo : https://github.com/laendrun/laendrunch

Check the GitHub Repo if you have a problem with this API or to request a modification of the documentation.

This documentation isn't 100% accurate. I have not figured everything out yet so I tried my best ðŸ˜‰.

# Group Email

You can send and save emails.

You can also retrieve all saved emails, a single saved email or all saved emails from or to a specific email adress. You can also request emails from a specific address to another specific address.

## Get all emails [GET /email{?from}{?to}]

This endpoint let's you retrieve all emails saved in the database.

+ Parameters
    + from: sender@mail.com (string) - The sender email address.
    + to: recipient@mail.com (string) - The recipient email address.

+ Request
    + Headers

            Authorization : Bearer admin_token

+ Response 200 (application/json)
    + Attributes
        + emails (array[Email])

## Send an email [POST /email/send]

This endpoint let's you send an email.

Before sending, it will be saved in the database.

+ Request
    + Headers

            Authorization: Bearer token
    + Attributes
        + Include Email

+ Response 201 (application/json)
    + Attributes
        + Include Email

## Save an email [POST /email/save]

This endpoint let's you save an email in the database.

+ Request
    + Headers

            Authorization: Bearer token
    + Attributes
        + Include Email

+ Response 201 (application/json)
    + Attributes
        + Include Email

# Group Special

This resource has almost the same endpoints as the email resource except it uses a different kind of token to authenticate.

The tokens used to authenticate with this resource are created manually and have no expiration date.

## Send an email [POST /special/send]

This endpoint let's you send an email.

Before sending, it will be saved in the database.

+ Request
    + Headers

            Authorization: Special token
    + Attributes
        + Include Email
    
+ Response 201 (application/json)
    + Attributes
        + Include Email

## Save an email [POST /special/save]

This endpoint let's you save an email in the database.

+ Request
    + Headers

            Authorization: Bearer token

+ Response 201 (application/json)
    + Attributes
        + Include Email

# Group User

This resource let logged in user change their information (email, password, username).

As an admin you can also retrieve an array of all users.

## Change a password [PATCH /user/password]

This endpoint let's you change your password.

+ Request
    + Headers

            Authorization: Bearer token
    + Attributes
        + password: `password` (string)
+ Response 200 (application/json)
    + Attributes
        + Include User

## Change an email [PATCH /user/email]

This endpoint let's you change your email.

+ Request
    + Headers

            Authorization: Bearer token
    + Attributes
        + email: `user@mail.com` (string)
+ Response 200 (application/json)
    + Attributes
        + Include User

## Change a username [PATCH /user/username]

This endpoint let's you change your username.

+ Request
    + Headers

            Authorization: Bearer token
    + Attributes
        + username: `laendrun` (string)
+ Response 200 (application/json)
    + Attributes
        + Include User

## Get user [GET /user]

You can get multiple responses from this endpoint depending on the token you send along with the request.
- With a user token, you'll only get information on the user linked to the token.
- With an admin token, you'll get a list of all users with all their informations.

+ Request
    + Headers

            Authorization: Bearer admin_token

+ Response 200 (application/json)
    + Attributes
        + users (array[User])


+ Request
    + Headers

            Authorization: Bearer token

+ Response 200 (application/json)
    + Attributes
        + Include User

## Get a specific user [GET /user/{?id}]

This endpoint let's an admin request information on a specific user by ID.

+ Parameters
    + id: 1 (number) - ID of the user to request data from.

+ Request
    + Headers

            Authorization : Bearer admin_token

+ Response 200 (application/json)
    + Attributes
        + Include User

## Delete a user [DELETE /user/delete/{?id}]

This endpoint let's an admin delete a user with the specified id.

+ Parameters
    + id: `1` (number) - ID of the user to delete in the database.

+ Request
    + Headers

            Authorization: Bearer admin_token
+ Response 200 (application/json)
    + Attributes
        + mesage: 'user with id `id` deleted.

# Group Auth

This resource holds all the endpoints related to authentication (login, signup, create).

## Signup [POST /auth/signup]

This endpoint let's a user signup to my website.

*API Route available but no options on the frontend.*

+ Request
    + Attributes
        + Include User

+ Response 201 (application/json)
    + Attributes
        + _id: `1` (number)
        + username: `laendrun` (string)

## Login [POST /auth/login]

This endpoint let's a user login to my website.

+ Request
    + Attributes
        + username: `laendrun` (string)
        + password: `password`(string)

+ Response 200 (application/json)
    + Attributes
        + token: `JSON Web Token` (string)
        + role_id: `1`(number)

## Create [POST /auth/create]

This endpoint let's an admin user create a new user.

+ Request
    + Headers

            Authorization: Bearer admin_token
    + Attributes
        + username: `laendrun` (string)
        + password: `password` (string)
        + role_id: `1` (number)

+ Response 201 (application/json)
    + Attributes
        + Include User

# Data Structures

## Email (object)
+ `_id`: `1` (number) - Email ID in the database.
+ `from`: `sender@mail.com` (string) - Sender email address.
+ `fromName`: `Firstname Lastname` (string) - Sender name.
+ `subject`: `Test email` (string) - Email subject.
+ `message`: `I'm trying to use my backend API to send and save emails` (string) - Email message.
+ `to`: `recipient@mail.com` (string) - Recipient email address.

## User (object)
+ username: `laendrun` (string) - User username.
+ email: `user@mail.com` (string) - User email.
+ password: `password` (string) - User password.
+ role_id: `1` (number) - Role ID.
+ id: `1` (number) - User ID in the database.